/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.13
 * Generated at: 2023-10-04 06:40:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.erser.vo.MemberVO;
import java.util.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {


		String contextPath;
	
  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/common/header.jsp", Long.valueOf(1696401022201L));
    _jspx_dependants.put("/common/footer.jsp", Long.valueOf(1696383110975L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.erser.vo.MemberVO");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Scope Project</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- header.jsp -->\r\n");
      out.write("<header>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');

		contextPath = request.getContextPath();
		out.println("contextPath : " + contextPath + "<br/>");
		
		// 요청 처리 완료 후 전달되는 message
		String msg = (String)request.getAttribute("msg");
		if(msg != null){
	
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		alert('");
      out.print(msg );
      out.write("');\r\n");
      out.write("	</script>\r\n");
      out.write("	");
		
		}
		
		// 로그인 된 사용자 정보 확인
		MemberVO loginMember = (MemberVO)session.getAttribute("loginMember");
		// 서버에 등록된 회원 목록
		List<MemberVO> memberList = (List<MemberVO>)application.getAttribute("memberList");
	
      out.write("\r\n");
      out.write("	<hr/>\r\n");
      out.write("	<h3>브라우저에서 전달된 쿠키 정보</h3>\r\n");
      out.write("	");

		if(loginMember == null){
			// 로그인 상태가 아닐 경우
			// 브라우저에서 전달되는 쿠키 정보 확인
			Cookie[] cookies = request.getCookies();
			a : for(Cookie c : cookies){
				// 로그인 상태 유지시 사용자 브라우저에 id를 name값으로 uid 저장
				String name = c.getName();
				String value = c.getValue();
				if(name.equals("id") && memberList != null && !memberList.isEmpty()){
					for(MemberVO m : memberList){
						if(m.getUid().equals(value)){
							// uid가 쿠키에 등록된 id와 일치하는 사용자 정보 검색 완료
							loginMember = m;
							session.setAttribute("loginMember", m);
							break a;
						}
					}
				}
				
				long age = c.getMaxAge();
				out.println(name + ":" + value + ":" + age +"<br/>");
			}
		}
		String sessionId = session.getId();
		out.println("sessionid : " + sessionId + "<br/>");
	
      out.write("\r\n");
      out.write("	<hr/>\r\n");
      out.write("	<a href=\"");
      out.print(contextPath );
      out.write("\">Main Page</a>\r\n");
      out.write("	|\r\n");
      out.write("	");
 if(loginMember == null) { 
      out.write("\r\n");
      out.write("	<a href=\"join.jsp\">회원가입</a>\r\n");
      out.write("	|\r\n");
      out.write("	<a href=\"login.jsp\">로그인</a>\r\n");
      out.write("	");
 } else { 
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print(loginMember.getUname() );
      out.write("님 반갑습니다. |\r\n");
      out.write("	<a href=\"logout.jsp\">로그아웃</a>\r\n");
      out.write("	");
 } 
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<hr/>\r\n");
      out.write("</header>");
      out.write("\r\n");
      out.write("    <!-- login.jsp -->\r\n");
      out.write("    <h1>LOGIN PAGE</h1>\r\n");
      out.write("    <form action=\"loginCheck.jsp\" method=\"POST\">\r\n");
      out.write("    	<table border=\"1\">\r\n");
      out.write("    		<tr>\r\n");
      out.write("    		 <th>아이디</th>\r\n");
      out.write("    		 <td>\r\n");
      out.write("    		 	<input type=\"text\" name=\"uid\" required/>\r\n");
      out.write("    		 </td>\r\n");
      out.write("    		</tr>\r\n");
      out.write("    		<tr>\r\n");
      out.write("    		 <th>비밀번호</th>\r\n");
      out.write("    		  <td>\r\n");
      out.write("    		 	<input type=\"password\" name=\"upw\" required/>\r\n");
      out.write("    		  </td>\r\n");
      out.write("    		</tr>\r\n");
      out.write("    		<tr>\r\n");
      out.write("    			<td colspan=\"2\">\r\n");
      out.write("    				<label>\r\n");
      out.write("    					<input type=\"checkbox\" name=\"userCookie\" value=\"cookie\"/>\r\n");
      out.write("    					로그인 상태 유지\r\n");
      out.write("    				</label>\r\n");
      out.write("    			</td>\r\n");
      out.write("    		</tr>\r\n");
      out.write("    		<tr>\r\n");
      out.write("    			<th colspan=\"2\"><button>로그인</button></th>\r\n");
      out.write("    		</tr>\r\n");
      out.write("    	</table>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("<!-- footer.jsp -->\r\n");
      out.write("	<footer>\r\n");
      out.write("		<hr/>\r\n");
      out.write("		copurights by Lee &copy; 1999. All rights reserved.\r\n");
      out.write("		<br/>\r\n");
      out.write("		<address>부산 동래구</address>	\r\n");
      out.write("	</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
